#>>>
# close all authentication and authorization services

#<<<
clean-authx:
	cat $(DIR)/lib/compose/docker-compose.yml $(DIR)/lib/logging/$(DOCKER_LOG_DRIVER)/docker-compose.yml \
		$(DIR)/lib/keycloak/docker-compose.yml | docker-compose -f - down

	cat $(DIR)/lib/compose/docker-compose.yml $(DIR)/lib/logging/$(DOCKER_LOG_DRIVER)/docker-compose.yml \
    	$(DIR)/lib/tyk/docker-compose.yml | docker-compose -f - down

	# - remove intermittent docker images
	docker rmi candigv2_keycloak:latest --force
	docker rmi candig_keycloak:latest --force

	docker rmi candigv2_tyk:latest --force
	docker rmi candig_tyk:latest --force

	# TODO: ask Shaikh if he has better ideas about tmp
 	# this tmp is created inside the tyk directory because the templates
 	# generated after envsubst-ing need to be available in the root or below
 	# where the Dockerfile is for it to cp. We could use docker-compose mounts.
	rm -r $(DIR)/lib/tyk/tmp/

#>>>
# initialize authentication and authorization services
# tyk, keycloak, vault
#<<<
.PHONY: init-authx
init-authx: init-keycloak init-tyk

#>>>
# authx, common settings
#<<<
init-authx-common:
	# Generate dynamic environment variables
	$(eval KEYCLOAK_CLIENT_ID_64=$(shell echo -n ${KEYCLOAK_CLIENT_ID} | base64))
	@echo $(KEYCLOAK_CLIENT_ID_64) > $(DIR)/tmp/secrets/keycloak-client-local-candig-id-64
	# temp: in production, explicitly indicating port 443 breaks vaults internal oidc provider checks.
	# simply remove the ":443 from the authentication services public url for this purpose:
	if [[ ${KEYCLOAK_PUBLIC_URL} == *":443"* ]]; then \
		echo "option 1"; \
		$(eval TEMP_KEYCLOAK_PUBLIC_URL=$(shell echo ${KEYCLOAK_PUBLIC_URL} | sed -e 's/\(:443\)\$//g')) \
	elif [[ ${KEYCLOAK_PUBLIC_URL} == *":80"* ]]; then \
		echo "option 2"; \
		$(eval TEMP_KEYCLOAK_PUBLIC_URL=$(shell echo ${KEYCLOAK_PUBLIC_URL} | sed -e 's/\(:80\)\$//g')) \
	else \
		echo "option 3"; \
		$(eval TEMP_KEYCLOAK_PUBLIC_URL=$(shell echo ${KEYCLOAK_PUBLIC_URL})) \
	fi ;\
	export KEYCLOAK_CLIENT_ID_64=$(KEYCLOAK_CLIENT_ID_64); \
	export TEMP_KEYCLOAK_PUBLIC_URL=$(TEMP_KEYCLOAK_PUBLIC_URL); \
	export CONFIG_DIR=\
	echo ; \

#>>>
# initialize keycloak service - idp
#<<<
init-keycloak: mkdir
	echo "    started init-keycloak" >> $(LOGFILE)

	$(MAKE) init-authx-common \

	if [[ ${KEYCLOAK_USE_LOCAL_IDP} == 1 ]]; then \
		echo "Setting up Keycloak;" ; \
		source ${PWD}/lib/keycloak/keycloak_setup.sh; \
	fi

# TODO: tyk playbook - separate out the creation of apps/api definitions so new ones can be added and run `make tyk-apps`
# TODO: tyk playbook - separate out the creation of policies so new ones can be added
# TODO: tyk playbook - separate out the creation of middleware so new ones can be added and existing ones edited
# TODO: tyk playbook - separate out the creation of key request AND generating new keys
# TODO: tyk playbook - separate out the creation of tyk config

#>>>
# initialize tyk service - api gateway
#<<<
init-tyk: mkdir
	echo "    started init-tyk" >> $(LOGFILE)

	$(MAKE) init-authx-common \

	echo "Setting up Tyk;" ; \
	${PWD}/lib/tyk/tyk_setup.sh; \
	echo ; \

	$(MAKE) compose-tyk
