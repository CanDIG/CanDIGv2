# Generated by Django 2.2.13 on 2020-07-06 14:55

import chord_metadata_service.restapi.models
import chord_metadata_service.restapi.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('chord', '0001_v1_0_0'),
        ('patients', '0001_v1_0_0'),
        ('resources', '0001_v1_0_0'),
    ]

    operations = [
        migrations.CreateModel(
            name='Biosample',
            fields=[
                ('id', models.CharField(help_text='Unique arbitrary, researcher-specified identifier for the biosample.', max_length=200, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, help_text='Human-readable, unstructured text describing the biosample or providing additional information.', max_length=200)),
                ('sampled_tissue', django.contrib.postgres.fields.jsonb.JSONField(help_text='An ontology term describing the tissue from which the specimen was collected. The use of UBERON is recommended.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('taxonomy', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term specified when more than one organism may be studied. It is advised that codesfrom the NCBI Taxonomy resource are used, e.g. NCBITaxon:9606 for humans.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('individual_age_at_collection', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='individual_age_at_collection', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:age_or_age_range_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'An age object describing the age of the individual at the time of collection of biospecimens or phenotypic observations.', 'oneOf': [{'$id': 'chord_metadata_service:age_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'properties': {'age': {'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'Age of a subject.', 'type': 'string'}}, 'required': ['age'], 'title': 'Age schema', 'type': 'object'}, {'$id': 'chord_metadata_service:age_range_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': "Age range of a subject (e.g. when a subject's age falls into a bin.)", 'help': "Age range of a subject (e.g. when a subject's age falls into a bin.)", 'properties': {'end': {'$id': 'chord_metadata_service:age_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ISO8601 duration string representing the end of the age range bin.', 'help': 'An ISO8601 duration string representing the end of the age range bin.', 'properties': {'age': {'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'Age of a subject.', 'type': 'string'}}, 'required': ['age'], 'title': 'Age schema', 'type': 'object'}, 'start': {'$id': 'chord_metadata_service:age_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ISO8601 duration string representing the start of the age range bin.', 'help': 'An ISO8601 duration string representing the start of the age range bin.', 'properties': {'age': {'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'Age of a subject.', 'type': 'string'}}, 'required': ['age'], 'title': 'Age schema', 'type': 'object'}}, 'required': ['start', 'end'], 'title': 'Age range schema', 'type': 'object'}], 'title': 'Age schema', 'type': 'object'}, formats=None)])),
                ('histological_diagnosis', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term representing a refinement of the clinical diagnosis. Normal samples could be tagged with NCIT:C38757, representing a negative finding.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('tumor_progression', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term representing if the specimen is from a primary tumour, a metastasis, or a recurrence. There are multiple ways of representing this using ontology terms, and the terms chosen will have a specific meaning that is application specific.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('tumor_grade', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term representing the tumour grade. This should be a child term of NCIT:C28076 (Disease Grade Qualifier) or equivalent.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('diagnostic_markers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A list of ontology terms representing clinically-relevant bio-markers.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('is_control_sample', models.BooleanField(default=False, help_text='Whether the sample is being used as a normal control.')),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', django.contrib.postgres.fields.jsonb.JSONField(help_text="An ontology term that represents the disease. It's recommended that one of the OMIM, Orphanet, or MONDO ontologies is used for rare human diseases.", validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('onset', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A representation of the age of onset of the disease', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:disease_onset_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'anyOf': [{'$id': 'chord_metadata_service:age_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'properties': {'age': {'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'Age of a subject.', 'type': 'string'}}, 'required': ['age'], 'title': 'Age schema', 'type': 'object'}, {'$id': 'chord_metadata_service:age_range_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': "Age range of a subject (e.g. when a subject's age falls into a bin.)", 'help': "Age range of a subject (e.g. when a subject's age falls into a bin.)", 'properties': {'end': {'$id': 'chord_metadata_service:age_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ISO8601 duration string representing the end of the age range bin.', 'help': 'An ISO8601 duration string representing the end of the age range bin.', 'properties': {'age': {'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'Age of a subject.', 'type': 'string'}}, 'required': ['age'], 'title': 'Age schema', 'type': 'object'}, 'start': {'$id': 'chord_metadata_service:age_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ISO8601 duration string representing the start of the age range bin.', 'help': 'An ISO8601 duration string representing the start of the age range bin.', 'properties': {'age': {'description': 'An ISO8601 duration string (e.g. P40Y10M05D for 40 years, 10 months, 5 days) representing an age of a subject.', 'help': 'Age of a subject.', 'type': 'string'}}, 'required': ['age'], 'title': 'Age schema', 'type': 'object'}}, 'required': ['start', 'end'], 'title': 'Age range schema', 'type': 'object'}, {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}], 'description': 'Schema for the age of the onset of the disease.', 'title': 'Onset age', 'type': 'object'}, formats=None)])),
                ('disease_stage', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A list of terms representing the disease stage. Elements should be derived from child terms of NCIT:C28108 (Disease Stage Qualifier) or equivalent hierarchy from another ontology.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('tnm_finding', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A list of terms representing the tumour TNM score. Elements should be derived from child terms of NCIT:C48232 (Cancer TNM Finding) or equivalent hierarchy from another ontology.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.CharField(help_text='Official identifier of the gene. It SHOULD be a CURIE identifier with a prefix used by the official organism gene nomenclature committee, e.g. HGNC:347 for humans.', max_length=200, primary_key=True, serialize=False)),
                ('alternate_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=200), blank=True, default=list, help_text='A list of identifiers for alternative resources where the gene is used or catalogued.', size=None)),
                ('symbol', models.CharField(help_text="A gene's official gene symbol as designated by the organism's gene nomenclature committee, e.g. ETF1 from the HUGO Gene Nomenclature committee.", max_length=200)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='HtsFile',
            fields=[
                ('uri', models.URLField(help_text='A valid URI to the file', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, help_text='Human-readable text describing the file.', max_length=200)),
                ('hts_format', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('SAM', 'SAM'), ('BAM', 'BAM'), ('CRAM', 'CRAM'), ('VCF', 'VCF'), ('BCF', 'BCF'), ('GVCF', 'GVCF')], help_text="The file's format; one of SAM, BAM, CRAM, VCF, BCF, GVCF, FASTQ, or UNKNOWN.", max_length=200)),
                ('genome_assembly', models.CharField(help_text='Genome assembly ID for the file, e.g. GRCh38.', max_length=200)),
                ('individual_to_sample_identifiers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Mapping between individual or biosample IDs and the sample identifier in the HTS file.', null=True)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='MetaData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp specifying when when this object was created.')),
                ('created_by', models.CharField(help_text='Name of the person who created the phenopacket.', max_length=200)),
                ('submitted_by', models.CharField(blank=True, help_text='Name of the person who submitted the phenopacket.', max_length=200)),
                ('updates', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A list of updates to the phenopacket.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:schema_list', '$schema': 'http://json-schema.org/draft-07/schema#', 'items': {'$id': 'chord_metadata_service:update_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An update event for a record (e.g. a phenopacket.)', 'help': 'An update event for a record (e.g. a phenopacket.)', 'properties': {'comment': {'description': 'Free-text comment about the changes made and/or the reason for the update.', 'help': 'Free-text comment about the changes made and/or the reason for the update.', 'type': 'string'}, 'timestamp': {'description': 'ISO8601 UTC timestamp specifying when when this update occurred.', 'format': 'date-time', 'help': 'Timestamp specifying when when this update occurred.', 'type': 'string'}, 'updated_by': {'description': 'Information about the person/organization/network that performed the update.', 'help': 'Information about the person/organization/network that performed the update.', 'type': 'string'}}, 'required': ['timestamp', 'comment'], 'title': 'Updates schema', 'type': 'object'}, 'title': 'Schema list', 'type': 'array'}, formats=['date-time'])])),
                ('phenopacket_schema_version', models.CharField(blank=True, help_text='Schema version of the current phenopacket.', max_length=200)),
                ('external_references', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A list of external (non-resource) references.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:schema_list', '$schema': 'http://json-schema.org/draft-07/schema#', 'items': {'$id': 'chord_metadata_service:external_reference_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'An encoding of information about a reference to an external resource.', 'help': 'An encoding of information about a reference to an external resource.', 'properties': {'description': {'description': 'An application-specific free-text description.', 'help': 'An application-specific free-text description.', 'type': 'string'}, 'id': {'description': 'An application-specific identifier. It is RECOMMENDED that this is a CURIE that uniquely identifies the evidence source when combined with a resource; e.g. PMID:123456 with a resource `pmid`. It could also be a URI or other relevant identifier.', 'help': 'An application-specific identifier. It is RECOMMENDED that this is a CURIE that uniquely identifies the evidence source when combined with a resource; e.g. PMID:123456 with a resource `pmid`. It could also be a URI or other relevant identifier.', 'type': 'string'}}, 'required': ['id'], 'title': 'External reference schema', 'type': 'object'}, 'title': 'Schema list', 'type': 'array'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('resources', models.ManyToManyField(help_text='A list of resources or ontologies referenced in the phenopacket', to='resources.Resource')),
            ],
        ),
        migrations.CreateModel(
            name='Phenopacket',
            fields=[
                ('id', models.CharField(help_text='Unique, arbitrary, researcher-specified identifier for the phenopacket.', max_length=200, primary_key=True, serialize=False)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('biosamples', models.ManyToManyField(blank=True, help_text='Samples (e.g. biopsies) taken from the individual, if any.', to='phenopackets.Biosample')),
                ('diseases', models.ManyToManyField(blank=True, help_text='A list of diseases diagnosed in the proband.', to='phenopackets.Disease')),
                ('genes', models.ManyToManyField(blank=True, help_text='Genes deemed to be relevant to the case; application-specific.', to='phenopackets.Gene')),
                ('hts_files', models.ManyToManyField(blank=True, help_text='A list of HTS files derived from the individual.', to='phenopackets.HtsFile')),
                ('meta_data', models.ForeignKey(help_text='A structured definition of the resources and ontologies used within a phenopacket.', on_delete=django.db.models.deletion.CASCADE, to='phenopackets.MetaData')),
                ('subject', models.ForeignKey(help_text='A subject of a phenopacket, representing either a human (typically) or another organism.', on_delete=django.db.models.deletion.CASCADE, related_name='phenopackets', to='patients.Individual')),
                ('table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='chord.Table')),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', django.contrib.postgres.fields.jsonb.JSONField(help_text='An ontology term that represents a clinical procedure performed on a subject.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('body_site', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term that is specified when it is not possible to represent the procedure with a single ontology class.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allele_type', models.CharField(choices=[('hgvsAllele', 'hgvsAllele'), ('vcfAllele', 'vcfAllele'), ('spdiAllele', 'spdiAllele'), ('iscnAllele', 'iscnAllele')], help_text='One of four allele types.', max_length=200)),
                ('allele', django.contrib.postgres.fields.jsonb.JSONField(help_text="The variant's corresponding allele", validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:allele_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'dependencies': {'genome_assembly': ['chr', 'pos', 'ref', 'alt', 'info'], 'seq_id': ['position', 'deleted_sequence', 'inserted_sequence']}, 'description': 'Variant allele types', 'oneOf': [{'required': ['hgvs']}, {'required': ['genome_assembly']}, {'required': ['seq_id']}, {'required': ['iscn']}], 'properties': {'alt': {'description': 'The alternate base(s).', 'help': 'The alternate base(s).', 'type': 'string'}, 'chr': {'description': 'A chromosome identifier e.g. chr2 or 2.', 'help': 'A chromosome identifier e.g. chr2 or 2.', 'type': 'string'}, 'deleted_sequence': {'description': 'Deleted sequence , sequence for the deletion, can be empty, e.g. A', 'help': 'Deleted sequence , sequence for the deletion, can be empty, e.g. A', 'type': 'string'}, 'genome_assembly': {'description': 'The reference genome identifier e.g. GRCh38.', 'help': 'The reference genome identifier e.g. GRCh38.', 'type': 'string'}, 'hgvs': {'description': '', 'help': '', 'type': 'string'}, 'id': {'description': 'An arbitrary identifier.', 'help': 'An arbitrary identifier.', 'type': 'string'}, 'info': {'description': 'Relevant parts of the INFO field.', 'help': 'Relevant parts of the INFO field.', 'type': 'string'}, 'inserted_sequence': {'description': 'Inserted sequence , sequence for the insertion, can be empty, e.g. G', 'help': 'Inserted sequence , sequence for the insertion, can be empty, e.g. G', 'type': 'string'}, 'iscn': {'description': 'E.g. t(8;9;11)(q12;p24;p12).', 'help': 'E.g. t(8;9;11)(q12;p24;p12).', 'type': 'string'}, 'pos': {'description': 'The 1-based genomic position e.g. 134327882.', 'help': 'The 1-based genomic position e.g. 134327882.', 'type': 'integer'}, 'position': {'description': 'Position , a 0-based coordinate for where the Deleted Sequence starts, e.g. 4.', 'help': 'Position , a 0-based coordinate for where the Deleted Sequence starts, e.g. 4.', 'type': 'integer'}, 'ref': {'description': 'The reference base(s).', 'help': 'The reference base(s).', 'type': 'string'}, 'seq_id': {'description': 'Sequence ID, e.g. Seq1.', 'help': 'Sequence ID, e.g. Seq1.', 'type': 'string'}}, 'title': 'Allele schema', 'type': 'object'}, formats=None)])),
                ('zygosity', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term taken from the Genotype Ontology (GENO) representing the zygosity of the variant.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypicFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='Human-readable text describing the phenotypic feature; NOT for structured text.', max_length=200)),
                ('pftype', django.contrib.postgres.fields.jsonb.JSONField(help_text='An ontology term which describes the phenotype.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)], verbose_name='type')),
                ('negated', models.BooleanField(default=False, help_text='Whether the feature is present (false) or absent (true, feature is negated); default is false.')),
                ('severity', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term that describes the severity of the condition.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('modifier', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A list of ontology terms that provide more expressive / precise descriptions of a phenotypic feature, including e.g. positionality or external factors.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('onset', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology term that describes the age at which the phenotypic feature was first noticed or diagnosed, e.g. HP:0003674.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('evidence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='One or more pieces of evidence that specify how the phenotype was determined.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:evidence_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'A representation of the evidence for an assertion, such as an observation of a phenotypic feature.', 'help': 'A representation of the evidence for an assertion, such as an observation of a phenotypic feature.', 'properties': {'evidence_code': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term that represents the evidence type.', 'help': 'An ontology term that represents the evidence type.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term that represents the evidence type.', 'help': 'A CURIE-style identifier for an ontology term that represents the evidence type.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term that represents the evidence type.', 'help': 'A human readable class name for an ontology term that represents the evidence type.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'reference': {'$id': 'chord_metadata_service:external_reference_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'An encoding of information about a reference to an external resource.', 'help': 'An encoding of information about a reference to an external resource.', 'properties': {'description': {'description': 'An application-specific free-text description.', 'help': 'An application-specific free-text description.', 'type': 'string'}, 'id': {'description': 'An application-specific identifier. It is RECOMMENDED that this is a CURIE that uniquely identifies the evidence source when combined with a resource; e.g. PMID:123456 with a resource `pmid`. It could also be a URI or other relevant identifier.', 'help': 'An application-specific identifier. It is RECOMMENDED that this is a CURIE that uniquely identifies the evidence source when combined with a resource; e.g. PMID:123456 with a resource `pmid`. It could also be a URI or other relevant identifier.', 'type': 'string'}}, 'required': ['id'], 'title': 'External reference schema', 'type': 'object'}}, 'required': ['evidence_code'], 'title': 'Evidence schema', 'type': 'object'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('biosample', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotypic_features', to='phenopackets.Biosample')),
                ('phenopacket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phenotypic_features', to='phenopackets.Phenopacket')),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.AddField(
            model_name='phenopacket',
            name='variants',
            field=models.ManyToManyField(blank=True, help_text='A list of variants identified in the proband.', to='phenopackets.Variant'),
        ),
        migrations.CreateModel(
            name='Interpretation',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the interpretation.', max_length=200, primary_key=True, serialize=False)),
                ('resolution_status', models.CharField(blank=True, choices=[('UNKNOWN', 'UNKNOWN'), ('SOLVED', 'SOLVED'), ('UNSOLVED', 'UNSOLVED'), ('IN_PROGRESS', 'IN_PROGRESS')], help_text='The current status of work on the case.', max_length=200)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('diagnosis', models.ManyToManyField(help_text='One or more diagnoses, if made.', to='phenopackets.Diagnosis')),
                ('meta_data', models.ForeignKey(help_text='Metadata about this interpretation.', on_delete=django.db.models.deletion.CASCADE, to='phenopackets.MetaData')),
                ('phenopacket', models.ForeignKey(help_text='The subject of this interpretation.', on_delete=django.db.models.deletion.CASCADE, related_name='interpretations', to='phenopackets.Phenopacket')),
            ],
        ),
        migrations.CreateModel(
            name='GenomicInterpretation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('REJECTED', 'REJECTED'), ('CANDIDATE', 'CANDIDATE'), ('CAUSATIVE', 'CAUSATIVE')], help_text='How the call of this GenomicInterpretation was interpreted.', max_length=200)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('gene', models.ForeignKey(blank=True, help_text='The gene contributing to the diagnosis.', null=True, on_delete=django.db.models.deletion.CASCADE, to='phenopackets.Gene')),
                ('variant', models.ForeignKey(blank=True, help_text='The variant contributing to the diagnosis.', null=True, on_delete=django.db.models.deletion.CASCADE, to='phenopackets.Variant')),
            ],
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='disease',
            field=models.ForeignKey(help_text='The diagnosed condition.', on_delete=django.db.models.deletion.CASCADE, to='phenopackets.Disease'),
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='genomic_interpretations',
            field=models.ManyToManyField(blank=True, help_text='The genomic elements assessed as being responsible for the disease.', to='phenopackets.GenomicInterpretation'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='hts_files',
            field=models.ManyToManyField(blank=True, help_text='A list of HTS files derived from the biosample.', related_name='biosample_hts_files', to='phenopackets.HtsFile'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='individual',
            field=models.ForeignKey(blank=True, help_text='Identifier for the individual this biosample was sampled from.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='biosamples', to='patients.Individual'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='procedure',
            field=models.ForeignKey(help_text='A description of a clinical procedure performed on a subject in order to extract a biosample.', on_delete=django.db.models.deletion.CASCADE, to='phenopackets.Procedure'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='variants',
            field=models.ManyToManyField(blank=True, help_text='A list of variants determined to be present in the biosample.', to='phenopackets.Variant'),
        ),
    ]
